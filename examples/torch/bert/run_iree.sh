#! /usr/bin/bash

# Generated by Kimi Chat

# 遍历当前目录及子目录下的所有 .mlir 文件
find . -type f -name "iree*.mlir" | while read mlir_file; do
    # 定义输出文件的名称，将 .mlir 后缀替换为 .vmfb
    output_file="${mlir_file%.mlir}.vmfb"

    # 使用 iree-compile 命令编译 MLIR 文件，并将结果输出到 .vmfb 文件
    # 这里假设 iree-compile 命令接受 -o 选项来指定输出文件
    # 并且假设 iree-compile 命令可以直接处理文件名中的通配符
    ~/stuff/iree-build/tools/iree-compile --iree-hal-target-backends=cuda --iree-opt-demote-f32-to-f16 --iree-hal-cuda-llvm-target-arch=sm_86 -o "$output_file" "$mlir_file"

    # 检查编译是否成功
    if [ $? -eq 0 ]; then
        echo "Compilation successful: $output_file"
    else
        echo "Compilation failed for $mlir_file"
    fi

    pattern="iree_.*_([0-9]+)_([0-9]+)\.mlir"

    if [[ $mlir_file =~ $pattern ]]; then
        bs="${BASH_REMATCH[1]}"
        seq_len="${BASH_REMATCH[2]}"

        # 输出提取的值
        echo "bs: $bs, seq_len: $seq_len"
    fi

    ~/stuff/iree-build/tools/iree-benchmark-module --module=$output_file \
        --iree-hal-target-backends=cuda --device=cuda://0 \
        --function=forward \
        --device_allocator=caching \
        --input=${bs}x${seq_len}xi64=1 --input=${bs}x${seq_len}xi64=1 --input=${bs}x${seq_len}xi64=1 --input="&${bs}x${seq_len}x30522xf16" --benchmark_repetitions=10

    nsys profile -o $output_file ~/stuff/iree-build/tools/iree-benchmark-module --module=$output_file \
        --iree-hal-target-backends=cuda --device=cuda://0 \
        --function=forward \
        --device_allocator=caching \
        --input=${bs}x${seq_len}xi64=1 --input=${bs}x${seq_len}xi64=1 --input=${bs}x${seq_len}xi64=1 --input="&${bs}x${seq_len}x30522xf16" --benchmark_repetitions=2

done

echo "Compilation process completed for all matching files."
