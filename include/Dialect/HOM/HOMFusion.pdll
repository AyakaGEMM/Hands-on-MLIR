#include "HOM/HOMOps.td"
#include "mlir/Dialect/Tosa/IR/TosaOps.td"

Constraint checkReshapeRemovable(op0 : Op, op1 : Op, op2 : Op);
Constraint checkMHAQKVReshape(op0 : Op, op1 : Op, op2 : Op);
Constraint checkMHAQKVTransposePerm(op0 : Op, op1 : Op, op2 : Op);
Constraint checkTransposeReshapeChangeable(op0 : Op);
Rewrite changeTransposeReshape(op0 : Op, op1 : Op, op2 : Op);
Rewrite removeRedundantReshape(op0 : Op, op1 : Op);
Rewrite buildMHAOp(op0
                   : Op, op1
                   : Op, op2
                   : Value, op3
                   : Op, op4
                   : Op, op5
                   : Op)
    ->Op;

// Try to remove meaningless reshape here.
Pattern {
  let A : Value<_ : HOM_RankedTensor>;
  let B : Value<_ : HOM_RankedTensor>;
  let reshapeA = op<tosa.reshape>(A);
  let reshapeB = op<tosa.reshape>(B);
  let matmul = op<hom.matmul>(reshapeA, reshapeB);
  let reshapeC = op<tosa.reshape>(matmul);
  checkReshapeRemovable(reshapeA, reshapeB, reshapeC);

  replace reshapeC with op<hom.matmul>(A, B);
}

Pattern {
  let newShape : Attr;
  let reshapeA = op<tosa.reshape>(A : Value) {
    new_shape = newShape
  } -> (output : Type);
  let reshapeB = op<tosa.reshape>(A){new_shape = newShape};

  rewrite reshapeB with { removeRedundantReshape(reshapeA, reshapeB); };
}

Pattern {
  let matmul = op<hom.matmul>(input0 : Value, input1 : Value);
  let root = op<hom.add>(matmul, input2 : Value);

  replace root with op<hom.matmul_add>(input0, input1, input2);
}

// Try to move transpose closer to matmul.
Pattern {
  let perm = op<tosa.const>;
  let transpose = op<tosa.transpose>(input1 : Value, perm);
  let reshape = op<tosa.reshape>(transpose);
  checkTransposeReshapeChangeable(reshape);

  rewrite reshape with { changeTransposeReshape(transpose, perm, reshape); };
}

// MHA
Pattern {
  let hiddenState : Value<_ : HOM_RankedTensor>;
  let qWeights = op<tosa.const>;
  let kWeights = op<tosa.const>;
  let vWeights = op<tosa.const>;
  let q = op<hom.matmul>(hiddenState, qWeights);
  let k = op<hom.matmul>(hiddenState, kWeights);
  let v = op<hom.matmul>(hiddenState, vWeights);

  let newShape : DenseI64ArrayAttr;
  let reshapeQ = op<tosa.reshape>(q){new_shape = newShape};
  let reshapeK = op<tosa.reshape>(k){new_shape = newShape};
  let reshapeV = op<tosa.reshape>(v){new_shape = newShape};
  checkMHAQKVReshape(reshapeQ, reshapeK, reshapeV);

  let permQ = op<tosa.const>;
  let permK = op<tosa.const>;
  let permV = op<tosa.const>;

  let transposeQ = op<tosa.transpose>(reshapeQ, permQ);
  let transposeK = op<tosa.transpose>(reshapeK, permK);
  let transposeV = op<tosa.transpose>(reshapeV, permV);
  checkMHAQKVTransposePerm(permQ, permK, permV);

  let qkBMM = op<hom.matmul>(transposeQ, transposeK);
  let scale = op<tosa.const>;
  let shift = attr<"0 : i8">;

  let calMHA = op<hom.matmul>(
      op<hom.softmax>(op<hom.add>(op<hom.mul>(qkBMM, scale){shift = shift}, mask
                                  : Value)),
      transposeV);

  let mha = op<tosa.reshape>(op<tosa.transpose>(calMHA, permMHA
                                                : Value < _
                                                : HOM_RankedTensor >));

  rewrite mha with {
    replace mha with buildMHAOp(reshapeQ, scale, mask, q, k, v);
  };
}

Pattern {
  let cast = op<tosa.cast>(input : Value);
  let root = op<hom.gather>(cast, values : Value);

  replace root with op<hom.gather>(input, values);
}

Pattern {
  let reshape = op<tosa.reshape>(input : Value);
  let root = op<hom.gather>(reshape, values : Value);
  let reshape0 = op<tosa.reshape>(root);

  replace reshape0 with op<hom.gather>(input, values);
}
