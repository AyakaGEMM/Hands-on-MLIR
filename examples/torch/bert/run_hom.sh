#! /usr/bin/bash

# Generated by Kimi Chat

clang++-17 bert.cu -O3 -I../../../thirdparty/cutlass/tools/library/include -I../../../include/ -I../../../thirdparty/llvm-project/mlir/include/ -I../../../thirdparty/TransformerEngine/transformer_engine/common/include -I../../../thirdparty/llvm-project/llvm/include/ -I../../../thirdparty/cutlass/include/ -I../../../thirdparty/llvm-project/build/include/ -L./ -L../../../build/lib/ -L../../../thirdparty/llvm-project/build/lib -L../../../thirdparty/TransformerEngine -lLLVM-17 -lhands_on_mlir_runner_utils -lhands_on_mlir_nvgpu_runner_utils -lhands_on_mlir_execution_engine -ltransformer_engine -ldl -lpthread -lrt -L$CUDA_HOME/lib64 \
     -lcudart_static -Wl,-rpath,../../../build/lib -Wl,-rpath,../../../thirdparty/TransformerEngine -Wl,-rpath,../../../thirdparty/llvm-project/build/lib -Wl,-rpath,./ --cuda-gpu-arch=sm_86 -std=gnu++17 -o run

# 遍历当前目录及子目录下的所有 .mlir 文件
find . -type f -name "bert-*.mlir" | while read mlir_file; do
    # 定义输出文件的名称，将 .mlir 后缀替换为 .so
    output_file="${mlir_file%.mlir}"
    output_file="${output_file#./}"

    ../../../build/bin/hands-on-opt --tosa-to-hom-pipeline --hom-fusion --hom-fp32-to-fp16 --hom-to-homnvgpu --homnvgpu-fusion $mlir_file > pre_tune.mlir

    # 检查编译是否成功
    if [ $? -eq 0 ]; then
        echo "Compilation successful: $output_file"
    else
        echo "Compilation failed for $mlir_file"
    fi

    pattern="bert-.*_([0-9]+)_([0-9]+)\.mlir"

    if [[ $mlir_file =~ $pattern ]]; then
        bs="${BASH_REMATCH[1]}"
        seq_len="${BASH_REMATCH[2]}"

        # 输出提取的值
        echo "bs: $bs, seq_len: $seq_len"
    fi

    ../../../build/bin/hands-on-opt --homnvgpu-legalize-gemm --tosa-layerwise-constant-fold --hom-serialize-weight --homnvgpu-to-func --hom-func-to-llvm-pipeline  pre_tune.mlir | \
    ../../../thirdparty/llvm-project/build/bin/mlir-translate --mlir-to-llvmir |\
    ../../../thirdparty/llvm-project/build/bin/llc > $output_file.s

    clang++-17 $output_file.s -O3 -fPIC -shared -L../../../build/lib/ -lhands_on_mlir_execution_engine -lhands_on_mlir_nvgpu_runner_utils -L../../../thirdparty/llvm-project/build/lib -lLLVM-17 -std=gnu++17 -g -o lib${output_file}.so

    ./run $bs $seq_len $output_file 0

    nsys profile -o true_sync_$output_file ./run $bs $seq_len $output_file 0

    ../../../build/bin/hands-on-opt --homnvgpu-autotune --homnvgpu-legalize-gemm --tosa-layerwise-constant-fold --hom-serialize-weight --homnvgpu-to-func --hom-func-to-llvm-pipeline  pre_tune.mlir | \
    ../../../thirdparty/llvm-project/build/bin/mlir-translate --mlir-to-llvmir |\
    ../../../thirdparty/llvm-project/build/bin/llc > autotune_$output_file.s

    clang++-17 autotune_$output_file.s -O3 -fPIC -shared -L../../../build/lib/ -lhands_on_mlir_execution_engine -lhands_on_mlir_nvgpu_runner_utils -L../../../thirdparty/llvm-project/build/lib -lLLVM-17 -std=gnu++17 -g -o libautotune_${output_file}.so

    ./run $bs $seq_len $output_file 1

    nsys profile -o autotune_true_sync_$output_file ./run $bs $seq_len $output_file 1

done

echo "Compilation process completed for all matching files."
